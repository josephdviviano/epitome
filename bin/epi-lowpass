#!/usr/bin/env python
"""
Takes input NIFTI 4D data, and applies the specified low-pass filter to each
voxel. To save on computation time, this requires a mask input. All values > 0
in the mask survive.

Usage: <filter_type> <func_name> <mask_name> <cutoff> <path> <run_number>

    filter: one of 'median', 'average', 'kaiser', 'butterworth'.
    func_name: full path of input functional data.
    mask_name: full path of input mask data. 
    cutoff: for median & average, this should be an odd integer number 
            defining the width of the time-domain filter.
            for kaiser & average, this should be a float representing the 
            lowpass cutoff in Hz.
    path: full path of the output directory.
    run_number: a string denoting the zero-padded run number.
"""

import os, sys
import numpy as np
import scipy as sp
import scipy.signal as sig
import nibabel as nib
import ninet as nn

def get_samp_nyq(TR):
    """
    From a TR, return the sampling rate and nyquist frequency.
    """
    if TR > 1000:
        TR = TR / 1000.0
    samp_rate = 1.0/TR
    nyq = samp_rate/2.0

    return samp_rate, nyq

def median_filter(func, mask, kernel_size=5):
    """
    Low-passes each time series using a n-d median filter. Useful in cases
    where one cannot assume Gaussian noise and/or would like to preserve 
    edges within the data.

    The default kernel size is extremely conservative, but does a nice job.
    """
    # load in everything
    func, func_aff, func_head, func_dims  = nn.utilities.loadnii(func)
    mask, mask_aff, mask_head, mask_dims  = nn.utilities.loadnii(mask)
    tmp, idx = nn.utilities.maskdata(func, mask)

    # init output array
    filt = np.zeros(tmp.shape)

    # filter data
    for x in np.arange(tmp.shape[0]):
        filt[x, :] = sig.medfilt(tmp[x, :], kernel_size=int(kernel_size))

    # create a 4D output array
    output = np.zeros(func.shape)
    output[idx, :] = filt
    output = output.reshape(func_dims)
    output_aff = func_aff
    output_head = func_head

    return output, output_aff, output_head

def mean_filter(func, mask, kernel_size=5):
    """
    Low-passes each time series using a 1d moving average filter. Useful in
    cases where one wants to suppress Gaussian noise.

    The default kernel size is extremely conservative, but does a nice job.
    """
    # load in everything
    func, func_aff, func_head, func_dims  = nn.utilities.loadnii(func)
    mask, mask_aff, mask_head, mask_dims  = nn.utilities.loadnii(mask)
    tmp, idx = nn.utilities.maskdata(func, mask)

    # init output array
    filt = np.zeros(tmp.shape)

    # filter data
    for x in np.arange(tmp.shape[0]):
        filt[x, :] = nn.signal.moving_average(tmp[x, :], N=kernel_size)

    # create a 4D output array
    output = np.zeros(func.shape)
    output[idx, :] = filt
    output = output.reshape(func_dims)
    output_aff = func_aff
    output_head = func_head

    return output, output_aff, output_head

def kaiser_filter(func, mask, cutoff=0.1):
    """
    Low-passes each time series using a bi-directional FIR kaiser filter.
    Useful in cases where the preservation of phase information is more
    important than strong attenuation of high frequencies.

    The default cutoff is the traditional resting-state cutoff.
    """
    # load in everything
    func, func_aff, func_head, func_dims  = nn.utilities.loadnii(func)
    mask, mask_aff, mask_head, mask_dims  = nn.utilities.loadnii(mask)
    tmp, idx = nn.utilities.maskdata(func, mask)

    # init output array
    filt = np.zeros(tmp.shape)

    # get sampling rate, nyquist frequency
    samp_rate, nyq = get_samp_nyq(func_head.values()[15][4])

    # return a kaiser window with 60 Hz attenuation over a 0.1 Hz transition
    width = 0.1
    ripple_db = 60.0
    numtap, beta = sig.kaiserord(ripple_db, width)
    
    # enforce odd filter order
    if np.remainder(numtap, 2.0) == 0:
        numtap = numtap -1

    # design and apply lowpass filter
    b = sig.firwin(numtap, cutoff/nyq, window=('kaiser', beta))
    a = [1.0]

    for x in np.arange(tmp.shape[0]):
        filt[x, :] = sig.filtfilt(b, a, tmp[x, :], axis=0)

    # create a 4D output array
    output = np.zeros(func.shape)
    output[idx, :] = filt
    output = output.reshape(func_dims)
    output_aff = func_aff
    output_head = func_head

    return output, output_aff, output_head

def butterworth_filter(func, mask, cutoff=0.1):
    """
    Low-passes each time series using a low order, bi-directional FIR
    butterworth filter. Useful in cases where you are particularly worried
    about the impact of discontinuities in your data on the behavior of your
    filter.

    The default cutoff is the traditional resting-state cutoff.
    """
    # load in everything
    func, func_aff, func_head, func_dims  = nn.utilities.loadnii(func)
    mask, mask_aff, mask_head, mask_dims  = nn.utilities.loadnii(mask)
    tmp, idx = nn.utilities.maskdata(func, mask)

    # init output array
    filt = np.zeros(tmp.shape)

    # get sampling rate, nyquist frequency
    samp_rate, nyq = get_samp_nyq(func_head.values()[15][4])

    # design and apply lowpass filter
    b, a = sig.butter(3, cutoff/nyq)
    a = [1.0]

    for x in np.arange(tmp.shape[0]):
        filt[x, :] = sig.filtfilt(b, a, tmp[x, :], axis=0)

    # create a 4D output array
    output = np.zeros(func.shape)
    output[idx, :] = filt
    output = output.reshape(func_dims)
    output_aff = func_aff
    output_head = func_head

    return output, output_aff, output_head

def write_output(path, uid, num, out, aff, head):
    """
    Writes a NIFTI file to the specified path with the specified run number.
    """
    #out = nib.nifti1.Nifti1Image(out, aff, head)    
    out = nib.nifti1.Nifti1Image(out, aff)
    out.update_header()
    out.header_class(extensions=())

    out.to_filename(os.path.join(path, 'func_lowpass.' + 
                                              str(uid) + '.' + 
                                              str(num) + '.nii.gz'))

    print('Run ' + str(num) + ' low pass filtered successfully.')

if __name__ == "__main__":
    
    # type checking
    sys.argv[1] = str(sys.argv[1])
    sys.argv[2] = str(sys.argv[2])
    sys.argv[3] = str(sys.argv[3])
    sys.argv[4] = float(sys.argv[4])
    sys.argv[5] = str(sys.argv[5])
    sys.argv[6] = str(sys.argv[6])
    sys.argv[7] = str(sys.argv[7])

    if sys.argv[1] == 'median':
        o, a, h = median_filter(sys.argv[2], sys.argv[3], sys.argv[4])
        write_output(sys.argv[5], sys.argv[6], sys.argv[7], o, a, h)
    
    elif sys.argv[1] == 'average':
        o, a, h = mean_filter(sys.argv[2], sys.argv[3], sys.argv[4])
        write_output(sys.argv[5], sys.argv[6], sys.argv[7], o, a, h)
    
    elif sys.argv[1] == 'kaiser':
        o, a, h = kaiser_filter(sys.argv[2], sys.argv[3], sys.argv[4])
        write_output(sys.argv[5], sys.argv[6], sys.argv[7], o, a, h)
    
    elif sys.argv[1] == 'butterworth':
        o, a, h = butterworth_filter(sys.argv[2], sys.argv[3], sys.argv[4])
        write_output(sys.argv[5], sys.argv[6], sys.argv[7], o, a, h)
    
    else:
        print(__doc__)
