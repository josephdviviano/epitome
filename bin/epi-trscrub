#!/usr/bin/env python
"""
epi-trdrop <func> <output> <motion> <DVARS> <report> <head_mm> <FD> <DV> <mode>

Removes motion-corrupted TRs from data, without interpolation. If called
from the command line, this will batch process all runs in all sessions 
for a given subject.

Runs in two modes. In mode one, high-motion TRs are cropped out of the data.
This is really only appropriate with resting state data. In mode two, a linear
interpolate is constructed between the deleted TRs, which is more appropriate
for task-based fMRI (and maybe resting state).

func   = full path to input nifti file.
out    = full path to output nifti file.
motion = full path to AFNI motion parameters.
DVARS  = full path to DVARS calculation.
report = full path to report on TRs scrubbed per subject.
head   = head radius in mm (default 50 mm).
FD     = censor TRs with instantaneous motion > x mm (default 0.3 mm).
DV     = censor TRs with instantaneous GS fluctuation > x % (def. 0.3 %).
mode   = 'drop' -- deletes TRs, 'interp' -- interpolates over TRs.

Defaults taken from Gwig et al. 2013 Cerebral Ctx and are subject to
change.

"""
import os, sys
import csv
import fnmatch

import numpy as np
import scipy as sp
import nibabel as nib
import ninet as nn

from scipy.interpolate import interp1d

def interp(data, idx, threshold=0.5):
    """
    Replaces TRs corrupted by head motion with a linear interpolate.
        threshold = percentage of TRs to retain, else we give up on a run.
    """

    ntrs = data.shape[1]

    # make sure the threshold is a value between 0 - 1
    if threshold < 0:
        threshold = 0
    elif threshold > 1:
        threshold = 1

    # if we are asked to interpolate an unreasonable number of TRs, use drop
    if idx.size > ntrs * threshold:
        print('Too many TRs to remove, using drop method!')
        data = drop(data, idx)

        return data

    # if we have nothing to do, move along
    if idx.size == 0:

        return data

    roi = 0
    # for all elements in the censor idx
    while roi <= len(idx) - 1: 
        # if there is room for a sequence
        while roi <= len(idx) - 2: 
            # and we find a sequence
            if idx[roi] + 1 == idx[roi + 1]: 
                # set the lower bound
                roiLo = idx[roi]

                # find the upper bound
                while idx[roi] + 1 == idx[roi + 1]: 
                    roi = roi + 1
                    #if we hit the end of the sequence
                    if idx[roi] == idx[-1]:
                        # set the upper bound
                        roiHi = idx[roi]
                        roi = roi + 1
                        break
                else:
                    # set the upper bound
                    roiHi = idx[roi] 
                    roi = roi + 1
        
            else:
                # if this isn't a sequence, upper and lower bounds are equal
                roiLo = idx[roi] 
                roiHi = idx[roi]
                roi = roi + 1
            
            for x in np.arange(data.shape[0]):
                # create interpolate over boundaries
                if roiHi < ntrs-1 and roiLo > 0:
                    vec = np.array([roiLo - 1, roiHi + 1]) # set the bound idx
                    fxn = interp1d(np.arange(len(vec)), data[x, vec], 
                                                      kind='linear')
                    new = fxn(np.linspace(0, len(vec) - 1, 
                                             len(vec) + 1 + (roiHi - roiLo)))
                
                    # write interp values over dataa
                    new = np.delete(new, [0, len(new)-1])
                    data[x, roiLo:roiHi + 1] = new

                # if our censor vector goes beyond acquisition on either side
                elif roiLo <= 0 and roiHi < ntrs-1:
                    # insert roiHi into earlier TRs
                    new = np.repeat(data[x, roiHi+1], roiHi) # < fixed
                    data[x, 0:roiHi] = new
                    print("***1***")

                elif roiHi >= ntrs:
                    # insert roiLo into later TRs
                    new = np.repeat(data[x, roiLo-1] ,ntrs - roiLo)
                    data[x, roiLo:ntrs + 1] = new
                    print("***2***")

        # now do the final value [is this still relevant?] ?? ?? ?? 
        if roi <= len(idx) - 1:
            # this isn't a sequence, so these are equal 
            roiLo = idx[roi]
            roiHi = idx[roi]
            roi = roi + 1

            for x in np.arange(data.shape[0]):
                # create interpolate over boundaries
                if roiHi < ntrs:
                    vec = np.array([roiLo - 1, roiHi + 1]) 
                    fxn = interp1d(np.arange(len(vec)), data[x, vec], 
                                                      kind='linear')
                    new = fxn(np.linspace(0, len(vec) - 1, 
                                             len(vec) + 1 + (roiHi-roiLo)))
            
                    # write interp values over data
                    new = np.delete(new, [0, len(new) - 1]) 
                    data[x, roiLo:roiHi + 1] = new
                    print("***3***")

                # if our censor vector goes beyond acquisition
                else:
                    # repeat the last good value
                    new = np.repeat(data[x, roiLo-1] ,ntrs - roiLo)
                    data[x, roiLo:ntrs + 1] = new
                    print("***4***")

    return data

def drop(data, idx):
    """
    Removes TRs corrupted by head motion.
    """
    ntrs = data.shape[1]

    idx_retained = np.setdiff1d(np.arange(ntrs), idx)
    data = data[:, idx_retained]

    return data

def TR_drop(func, out, motion, DVARS=None, report=None, head=50, 
                                                        FD_t=0.3, 
                                                        DV_t=0.3,
                                                        mode='drop'):
    # convert/confirm variable types
    print('\n TR_drop: ' + func)
    print('             FD = ' + str(FD_t) + ' mm,')
    print('          DVARS = ' + str(DV_t) + ' %,')
    print('    Head Radius = ' + str(head) + ' mm.\n')

    # load data, affine, header, get image dimensions
    data, outA, outH, dims = nn.utilities.loadnii(func)

    # load motion parameters
    FD = np.genfromtxt(motion)

    FD[:,0] = np.radians(FD[:,0])*head # roll
    FD[:,1] = np.radians(FD[:,1])*head # pitch
    FD[:,2] = np.radians(FD[:,2])*head # yaw

    # sum over absolute derivative for the 6 motion parameters
    FD = np.sum(np.abs(np.diff(FD, n=1, axis=0)), axis=1)
    FD = np.insert(FD, 0, 0) # align FD & DVARS
    idx_FD = np.where(FD >= FD_t)[0]

    if DVARS != None:
        DV = np.genfromtxt(DVARS)
        DV = (DV) / 1000 # convert to % signal change
        idx_DV = np.where(DV >= DV_t)[0] 
        idx = np.union1d(idx_FD, idx_DV)
    else:
        idx = idx_FD
    
    # mask TRs 1 back and 2 forward from threshold
    idx = np.union1d(
          np.union1d(
          np.union1d(idx-1, idx), idx+1), idx+2)

    # remove censor idx < 1 and > length of run -1 (always keep 1st and last tr)
    idx = idx[idx > 1]
    idx = idx[idx < dims[3]-1]
    
    # find all the kosher TRs and scrub data
    if mode == 'drop':
        data = drop(data, idx)
    elif mode == 'interp':
        data = interp(data, idx)

    # keep track of the number of retained TRs
    print('TRs: ' + str(dims[3]-len(idx)) + ', Run: ' + os.path.basename(func))

    # reshape data, header
    #outH.set_data_shape((dims[0], dims[1], dims[2], dims[3]))
    data = np.reshape(data, (dims[0], dims[1], dims[2], dims[3]))
    
    # removed header as this interferes with downstream AFNI calls 
    #data = nib.nifti1.Nifti1Image(data, outA, outH)
    data = nib.nifti1.Nifti1Image(data, outA)

    data.update_header()
    data.header_class(extensions=())

    # write 4D output,
    data.to_filename(out)
    
    # if we specify a report, wrtie it out yo
    if report != None:
        f = open(report, 'wb')
        f.write(str(dims[3]))
        f.close()

if __name__ == "__main__":

    if len(sys.argv) != 10:
        print(__doc__)
        sys.exit()

    # check inputs
    func = str(sys.argv[1])
    output = str(sys.argv[2])
    motion = str(sys.argv[3])

    if str(sys.argv[4]).lower() != 'none':
        DVARS = str(sys.argv[4])
    else:
        DVARS = None

    if str(sys.argv[5]).lower() != 'none':
        report = str(sys.argv[5])
    else:
        report = None

    head_mm = float(sys.argv[6])
    FD_t = float(sys.argv[7])
    DV_t = float(sys.argv[8])

    if str(sys.argv[9]).lower() not in ['drop', 'interp']:
        print('Mode: ' + str(sys.argv[9]) + ' invalid, using mode = drop.')
        mode = 'drop'
    else:
        mode = str(sys.argv[9]).lower()

    TR_drop(func, output, motion, DVARS, report, head_mm, FD_t, DV_t, mode)
