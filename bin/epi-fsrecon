#!/usr/bin/env python

import os, sys
import fnmatch
import subprocess

import epitome as epi

def add_t1s(path, sess, cmd):
    """
    This loops through a session, appending input T1s to the recon-all command.
    """
    for run in os.listdir(os.path.join(path, sess)):
        if os.path.isdir(os.path.join(path, sess, run)) == True:
            for f in os.listdir(os.path.join(path, sess, run)):
                
                # add all available files to the inputs
                if f.endswith(".nii") == True or f.endswith(".nii.gz") == True:
                    cmd = cmd + ' -i ' + os.path.join(path, sess, run, f)

    return cmd

def generate_stack(root, expt):
    """
    Returns a stack of all the freesurfer recon-all commands to run.
    """
    stack = []

    # get subject numbers
    subjects = epi.utilities.get_subj(os.path.join(root, expt))

    # loop through all subjects
    for subj in subjects:
        path = os.path.join(root, expt, subj, 'T1')

        for sess in os.listdir(path):
            if os.path.isdir(os.path.join(path, sess)) == True:

                fs_dir = os.environ['SUBJECTS_DIR']
                fs_subj = '{expt}_{subj}_{sess}'.format(expt=expt, 
                                                        subj=subj, 
                                                        sess=sess)
    
                if os.path.isdir(os.path.join(fs_dir, fs_subject)) == True:
                    continue

                # construct the command with all available T1s per session
                cmd = 'recon-all -all -notal-check -cw256 -subjid ' + fs_subj
                cmd = add_t1s(path, sess, cmd)                
                cmd = cmd + ' -qcache' # for cortical thickness analysis
                
                stack.append(cmd)
    
    return stack

def FS_recon(root, expt, mode, proc):

    stack = generate_stack(root, expt)

    # This would per
    # # run multiple instances of Freesurfer in parallel
    # processes = set()
    # for cmd in stack:
    #     processes.add(subprocess.Popen(cmd, shell=True))
    #     if len(processes) >= core:
    #         os.wait()
    #         processes.difference_update(
    #             p for p in processes if p.poll() is not None)

    # #Check if all the child processes were closed
    # for p in processes:
    #     if p.poll() is None:
    #         p.wait();

    f = open(proc, 'wb')

    for cmd in stack:
        f.write(str(cmd) + '\n')

    f.write('\n')
    f.close()

if __name__ == "__main__":
    # check input types
    root = str(sys.argv[1])
    expt = str(sys.argv[2])
    mode = str(sys.argv[3])
    proc = str(sys.argv[4])

    # submit arguments to the program
    FS_recon(root, expt, mode, proc)
