#!/usr/bin/env python
"""
     _  _  . |_  _   _   _  | a mri metapipeline
    (- |_) | |_ (_) ||| (-  | github.com/josephdviviano/epitome
       |                    | 
                       
    epitome help   -- prints help for selected module.
    epitome verify -- checks input files for experiment.
    epitome check  -- checks installation paths & environment.
    epitome run    -- produce pre-processing and QC scripts.
    epitome clean  -- produce clean-up scripts.
"""

import os, sys, stat
from copy import copy
import epitome as epi

DIR_DATA = epi.config.find_data()
DIR_AFNI = epi.config.find_afni()
DIR_MATLAB = epi.config.find_matlab()

def get_modules(dir_pipe, moduletype='pre', used=[]):
    """
    Prints the available modules. Optionally prompts the user to select one.
    If provided with a list of 'used' modules, these are stripped from the
    output.
    """

    # try to import a list of the module types
    dir_modules = os.path.join(dir_pipe, 'epitome/modules', str(moduletype))
    try:
        module_list = [f for f in os.listdir(dir_modules)
                               if os.path.isfile(os.path.join(dir_modules, f))]
    except:
        module_types = os.listdir(os.path.join(dir_pipe, 'epitome/modules'))
        print('Invalid module type. Available:\n')
        for m in module_types:
            print('    ' + str(m))
        return None

    # if we get a used list, remove them from the module list
    if used != None:
        for u in used:
            try:
                module_list.remove(u)
            except:
                pass

    try:
        selection = epi.utilities.selector_list(module_list)
        used.append(selection)
        return selection, used
    except ValueError as ve:
        print('Invalid selection')
        return None, used

def get_mode(expt):
    """
    Prints the available image modalities. Optionally prompts the user to 
    select one.
    """

    # get a sorted list of the experiments
    dir_expt = os.path.join(DIR_DATA, expt)
    subj_list = [d for d in os.listdir(dir_expt)
                         if os.path.isdir(os.path.join(dir_expt, d))]
    dir_subj = os.path.join(dir_expt, subj_list[0])
    mode_list = [d for d in os.listdir(dir_subj)
                         if os.path.isdir(os.path.join(dir_subj, d))]

    try:
        selection = epi.utilities.selector_list(mode_list)
        return selection
    except ValueError as ve:
        print('Invalid selection')
        sys.exit()

def get_experiments(check=None):
    """
    Prints the available experiments. Optionally prompts the user to select
    one.
    """
    if epi.utilities.has_permissions(DIR_DATA) == False:
        sys.exit()

    # get a sorted list of the experiments
    expt_list = [d for d in os.listdir(DIR_DATA)
                         if os.path.isdir(os.path.join(DIR_DATA, d))]

    try:
        selection = epi.utilities.selector_list(expt_list)

        # this is for the commandline usage
        if check == 'check':
            check_directories(selection)
        # this is an internal usage
        else:
            return selection

    except ValueError as ve:
        print('Invalid selection')
        sys.exit()

def get_date_user():
    """
    Returns a eyeball-friendly timestamp, the current user's name, 
    and a filename-friendly timestamp.
    """
    import time
    import getpass

    datetime = time.strftime("%Y/%m/%d -- %H:%M:%S")
    user = getpass.getuser()
    f_id = time.strftime("%y%m%d_%H%M%S")

    return datetime, user, f_id

def print_help(module):
    """
    Prints the contents of the markdown file line by line, wrapping long sections.
    """

    import textwrap

    print('')
    if module != None:
        helpfile = open(os.path.join(DIR_PIPE, 'doc/' + module + '.md'), 'rb')
        helpfile = helpfile.readlines()

        for line in helpfile:
            if len(line) < 80:
                print line.strip('\n')
            else:
                print("\n".join(textwrap.wrap(line)))

def help_query():
    """
    Lists all modules ans allows user to select one to print the associated help.
    """
    dir_pipe = epi.config.find_epitome()

    # ask which module type we want to look at
    module_types = os.listdir(os.path.join(dir_pipe, 'epitome/modules'))

    try: 
        response = epi.utilities.selector_list(module_types)
    except ValueError as ve:
        print("""You didn't input a valid number! Default = 'pre'.""")
        response = 'pre'

    print('Which module do you need help with?')
    module, used = get_modules(dir_pipe, moduletype=str(response))
    print_help(module)

def check_environment(mode='verbose'):
    """
    Looks for the various manditory and optional dependencies and warns 
    the user if the environment is not configured correctly.
    """
    # collect local checks from config.py
    dir_freesurfer = epi.config.find_freesurfer()
    dir_freesurfer_data = epi.config.find_freesurfer_data()
    dir_fix = epi.config.find_fix()
    dir_fsl = epi.config.find_fsl()
    dir_pipe = epi.config.find_epitome()

    # checks for manditory software
    if DIR_DATA == None:
        print('ERROR: Manditory EPITOME_DATA variable is not set.')
        sys.exit()
    
    if os.path.isdir(DIR_DATA) == False:
        print('ERROR: Manditory epitome data directory does not exist: ' 
                                                        + str(DIR_DATA))
        sys.exit()

    if dir_pipe == None:
        print('ERROR: Manditory package epitome is not on your path??')
        sys.exit()

    if DIR_AFNI == None:
        print('ERROR: Manditory package AFNI is not on your path.')
        sys.exit()

    if dir_fsl == None:
       print('ERROR: Manditory package FSL is not on your path.')
       sys.exit()
    
    if dir_freesurfer == None:
        print('ERROR: Manditory package Freesurfer is not on your path.')
        sys.exit()

    if dir_freesurfer_data == None:
        print('ERROR: Manditory variable SUBJECTS_DIR is not set.')
        sys.exit()

    if os.path.isdir(dir_freesurfer_data) == False:
        print('ERROR: Manditory Freesurfer data directory does not exist: ' 
                                                           + str(DIR_DATA))
        sys.exit()

    if DIR_MATLAB == None:
        txt = ('WARNING: MATLAB / compiler is unavailable. Some \n' 
               'modules will not work. See here for more:, \n'
               'http://afni.nimh.nih.gov/sscc/dglen/McRetroTS\n')
        print(txt)
    
    if dir_fix == None:
        print('WARNING: FSL FIX is unavailable. Some modules will not work.')

    if mode == 'verbose':
        txt = ('\nCurrent environment configuration:\n\n'
               '    data            -- {DIR_DATA}\n'
               '    epitome         -- {dir_pipe}\n'
               '    freesurfer      -- {dir_freesurfer}\n'
               '    freesurfer data -- {dir_freesurfer_data}\n'
               '    afni            -- {DIR_AFNI}\n'
               '    fsl             -- {dir_fsl}\n'
               '    fsl fix         -- {dir_fix}\n' 
               '    matlab          -- {DIR_MATLAB}\n'.format(
                    DIR_DATA=DIR_DATA,
                    dir_pipe=dir_pipe,
                    dir_freesurfer=dir_freesurfer,
                    dir_freesurfer_data=dir_freesurfer_data,
                    DIR_AFNI=DIR_AFNI,
                    dir_fsl=dir_fsl,
                    dir_fix=dir_fix,
                    DIR_MATLAB=DIR_MATLAB))
        print(txt)

def check_run(expt, subj, mode, sess, run):
    """
    Returns True if RUN folder contains a NIFTI file, False otherwise.

    Usage:
        truth = check_run(experiment, subject, image modality, session, run)
    """
    # retrieve the number of files within each run folder
    dir_file = os.path.join(DIR_DATA, expt, subj, mode, sess, run)
    file_list = [d for d in os.listdir(dir_file)
                         if os.path.isfile(os.path.join(dir_file, d))]

    n_files = filter(lambda x: x[-7:] == '.nii.gz' or 
                               x[-4:] == '.nii', file_list)
    n_files = len(n_files)

    return n_files

def check_mode(expt, subj, mode):
    """
    This returns each image modality's total number of runs and checks for run
    folders with missing data.
    """
    n_runs = 0
    
    # retrieve the sessions for a given image modality
    dir_mode = os.path.join(DIR_DATA, expt, subj, mode)
    sess_list = [d for d in os.listdir(dir_mode)
                         if os.path.isdir(os.path.join(dir_mode, d))]
    
    # retrieve runs for a given session
    for sess in sess_list:
        dir_sess = os.path.join(dir_mode, sess)
        run_list = [d for d in os.listdir(dir_sess)
                            if os.path.isdir(os.path.join(dir_sess, d))
                            and d[0:3] == 'RUN']

        # check for runs missing/too many NIFTI files, print warnings
        for run in run_list:
            n_files = check_run(expt, subj, mode, sess, run) 
            n_runs = n_runs + n_files
            
            if n_files == 0:
                print("""subject {subj}, {mode}, sess {sess}, run {run} \
                         contains no NIFTI file.""".format(subj=str(subj), 
                                                           mode=str(mode),
                                                           sess=str(sess), 
                                                           run=str(run)))
            if n_files > 1:
                print("""subject {subj}, {mode}, sess {sess}, run {run} \
                         contains {n} NIFTI files.""".format(subj=str(subj), 
                                                             mode=str(mode),
                                                             sess=str(sess), 
                                                             run=str(run),
                                                             n=str(n_files)))
    return n_runs

def check_directories(expt):
    """
    This checks the image modalities for each subject in an experiment. It also
    reports the number of subjects with each kind of image modality.
    """
    if epi.utilities.has_permissions(os.path.join(DIR_DATA, expt)) == False:
        sys.exit()
    
    # attempt to access the subjects for a given experiment
    try:
        subjects = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))
    except:
        print('Your experiment path is incorrect ' + str(expt))

    # this dict will hold our count
    mode_dict = {}

    # loop through subjects, returning image modality counts, and record
    for subj in subjects:
        
        # retrieve the image modalities for a given subject 
        dir_subj = os.path.join(DIR_DATA, expt, subj)
        mode_list = [d for d in os.listdir(dir_subj) 
                             if os.path.isdir(os.path.join(dir_subj, d))]
        
        for mode in mode_list:    
            # check inside each modality, get the number of sessions
            n_runs = check_mode(expt, subj, mode)
            
            # add them to the count
            try:
                mode_dict[str(mode)] = mode_dict[str(mode)] + n_runs
            except:
                mode_dict[str(mode)] = n_runs

    # print out the file counts per image modality
    print('')
    for mode_key in mode_dict:
        print('    ' + str(mode_dict[mode_key]) + ' NIFTIs in ' + str(mode_key))
    print('')

def writer(p_list, line, filename, f, output, bkup, mode):
    """
    Writes lines to the master script.
    """
    if mode == 'sub':
        filename = '${DIR_DATA}/${DIR_EXPT}/${SUB}/' + filename
    elif mode == 'exp':
        filename = '${DIR_DATA}/${DIR_EXPT}/' + filename


    # output will == None if we made a mistake
    if output != None:
        out_line = line + ' >> ' + filename + '\n'
        f.write(out_line)
        p_list.append(line)

    # if we did make a mistake, restore the old output
    else:
        output = copy(bkup)

    return p_list, output

def mangle_string(string):
    """
    Turns an arbitrary string into a decent filename (no underscores allowed)!
    """
    string = string.replace(' ', '-')
    string = string.strip(",./;'[]\|_=+<>?:{}!@#$%^&*()`~")
    string = string.strip('"')

    return string

# The Cleanup Pipeline
###############################################################################
def run_cleanup():
    """
    Prints out scripts used to manage / remove epitome outputs.

        Perhaps this can be merged with the main function?
    """
    epi.utilities.check_os()
    dir_pipe = epi.config.find_epitome()

    print('epitome cleanup: THIS DELETES DATA.')

    # get the experiment
    flag = 0
    while flag == 0:
        expt = get_experiments()
        if expt == None:
            print('')
        else:
            flag = 1
    
    print('Experiment: ' + str(expt) + '. Select image modality.\n')
 
    # get the mode
    flag = 0
    while flag == 0:
        mode = get_mode(expt)
        if mode == None:
            print('')
        else:
            flag = 1

    # get the date and time, current user, f_id
    datetime, user, f_id = get_date_user()

    # generate the unique filenames for this run
    clean = 'clean_' + f_id + '.sh'

    # open up the master script, write common variables
    f = open(os.path.join(DIR_DATA, expt, clean), 'wb')

    txt = ('#!/bin/bash\n\n'
           '# Master script for {expt}: {mode}.\n'
           '# Generated: {datetime} by {user}.\n\n'
           '## Setup\n'
           'export dir_pipe={dir_pipe}\n'
           'export DIR_DATA={DIR_DATA}\n'
           'export DIR_AFNI={DIR_AFNI}\n'
           'export DIR_EXPT={expt}\n'
           'export DATA_TYPE={mode}\n'
           'export AFNI_DECONFLICT=OVERWRITE\n'.format(
                expt=expt, 
                mode=mode,
                user=user,
                datetime=datetime, 
                dir_pipe=dir_pipe, 
                DIR_DATA=DIR_DATA, 
                DIR_AFNI=DIR_AFNI))
    f.write(txt)


    # get the subjects
    print('\nWould you like to cleanup all subjects, or just some?')
    flag = 0
    while flag == 0:
        output = ''
        choice = ['all', 'some']
        try:
            decision = epi.utilities.selector_list(choice)
            flag = 1
        except ValueError as ve:
            print ('Invalid selection, please try again.')

    # optionally allow me to only clean up some subjects
    if decision == 'some':
        flag = 0
        subjects = []
        while flag == 0:
            print('Please select a subject.')
            output = ''
            subj_list = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))

            try:
                subj = epi.utilities.selector_list(subj_list)
                subjects.append(subj)
            except ValueError as ve:
                print('Invalid subject, please try again.')

            print('\nThe following subjects are slated for cleanup:\n')
            for subj in subjects:
                print(subj)
            print('')
            response = raw_input("""Type 'stop' to stop, else continue: """)

            if response == 'stop':
                flag = 1

    # otherwise just get the whole list
    elif decision == 'all':
        subjects = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))
        print('\nThe following subjects are slated for cleanup:\n')
        for subj in subjects:
            print(subj)
        print('')

    # print these subjects to the script
    f.write('export SUBJECTS="')
    for subj in subjects:
        f.write(str(subj) + ' ')
    f.write('"\n')

    # close down the file (cleanup commands added via cleanup.py)
    f.write('## Cleanup Commands \n\n')
    f.close()

    # now loop through the cleanup modules until the user aborts
    flag = 0 # breaks us out of the loop
    while flag == 0:

        print('\nPlease select the next cleanup module:\n')
        module, used = get_modules(dir_pipe, moduletype='cleanup')
        if module == None:
            print('')
        else:
            # executes the chosen module, write cleanup commands
            command = 'epi.commands.' + str(module) + '.run(expt, clean)'
            eval(command)
        
        # ask if we should continue
        response = raw_input("""Type 'stop' to stop, else continue: """)
        if response == 'stop':
            flag = 1

    # print some final remarks
    print('******************************************************************')
    print('The cleanup script can be manually executed via:\n' + 
           '. ' + str(os.path.join(DIR_DATA, expt, clean)) + '\n' +
           'and the user must manually OK each clean-up step.')
    print('******************************************************************')

# The Actual Pipeline 
###############################################################################
def main():
    """
    Runs the main epitome CLI. 
    """
    epi.utilities.check_os()
    check_environment('quiet')
    datetime, user, f_id = get_date_user()
    dir_pipe = epi.config.find_epitome()


    print('Running epitome. Select experiment.')

    # make sure we have permissions to access the experiment directory.
    if epi.utilities.has_permissions(DIR_DATA) == False:
        sys.exit()

    # get the experiment
    flag = 0
    while flag == 0:
        expt = get_experiments()
        if expt == None:
            print('')
        else:
            flag = 1

    # now check to make sure we have experiment-specific permissions.
    if epi.utilities.has_permissions(os.path.join(DIR_DATA, expt)) == False:
        sys.exit()

    # make the epitome directory if required
    if os.path.isdir('/home/' + str(user) + '/epitome') == False:
        os.system('mkdir /home/' + str(user) + '/epitome')

    # present the user with the curent pipelines
    pipelist = os.listdir(os.path.join('/home', user, 'epitome'))
    pipelist = filter(lambda x: os.path.isdir(os.path.join(
                                        '/home', user, 'epitome', x)), pipelist)
    pipelist.append('***NEW***')
    print('\nSelect which replicant you want from ~/epitome:')
    ID = epi.utilities.selector_list(pipelist)

    if ID == '***NEW***':
        print('\nInput unique identifier for this pipeline (alphanumeric):')
        ID = raw_input('ID: ')
        ID = mangle_string(ID)
        localpath = '/home/{user}/epitome/{ID}'.format(user=user, ID=ID)
        
        print('\nReplicating the current pipeline in ~/epitome/' +str(ID) + '.')
        os.system('mkdir ' + localpath)
        os.system('cp -r {pipe}/bin {path}'.format(pipe=dir_pipe, 
                                                     path=localpath))
        os.system('cp -r {pipe}/doc {path}'.format(pipe=dir_pipe, 
                                                     path=localpath))
        os.system('cp -r {pipe}/epitome {path}'.format(pipe=dir_pipe, 
                                                         path=localpath))

    else:
        localpath = '/home/{user}/epitome/{ID}'.format(user=user, ID=ID)

    # get the date and time, current user, f_id, set dir_pipe to be local
    master = 'master_{f_id}_{ID}.sh'.format(f_id=f_id, ID=ID)
    cmd = 'cmd_{f_id}_{ID}.sh'.format(f_id=f_id, ID=ID)
    proc = 'proclist_{f_id}_{ID}.sh'.format(f_id=f_id, ID=ID)
    dir_pipe = copy(localpath)

    print('\nExperiment: ' + str(expt) + '. Select image modality.')

    # get the mode
    flag = 0
    while flag == 0:
        mode = get_mode(expt)
        if mode == None:
            print('')
        else:
            flag = 1

    print('\nImage Modality: ' + str(mode) + '. Adding Freesurfer stages.')

    # open up the master script, write common variables
    f = open(os.path.join(DIR_DATA, expt, master), 'wb')

    txt = ('#!/bin/bash\n\n'
           '# Master script for {expt}: {mode}.\n'
           '# Generated: {datetime} by {user}.\n\n'
           '## Setup\n'
           'export DIR_PIPE={dir_pipe}\n'
           'export DIR_DATA={DIR_DATA}\n'
           'export DIR_AFNI={DIR_AFNI}\n'
           'export DIR_EXPT={expt}\n'
           'export DATA_TYPE={mode}\n'
           'export ID={ID}\n\n'
           'export PROC={proc}\n'
           'export CMD={cmd}\n\n'
           'export AFNI_DECONFLICT=OVERWRITE\n'
           'export SUBJECTS=$(python ${{DIR_PIPE}}/epitome/utilities.py ' 
           '${{DIR_DATA}} ${{DIR_EXPT}})\n\n'
           '## Freesurfer\n'
           'epi-fsrecon ${{DIR_DATA}} ${{DIR_EXPT}} ${{DATA_TYPE}} ${{DIR_DATA}}/${{DIR_EXPT}}/${{PROC}}\n'
           '. ${{DIR_PIPE}}/epitome/modules/freesurfer/fsexport '
           '${{DIR_DATA}} ${{DIR_EXPT}} >> ${{DIR_DATA}}/${{DIR_EXPT}}/${{PROC}}\n\n'
           '## Begin Pipeline\n'
           'for SUB in ${{SUBJECTS}}; do\n\n'
           'cat > ${{DIR_DATA}}/${{DIR_EXPT}}/${{SUB}}/${{CMD}} << EOF\n'
           'export DIR_PIPE=${{DIR_PIPE}}\n'
           'export DIR_DATA=${{DIR_DATA}}\n'
           'export DIR_AFNI=${{DIR_AFNI}}\n'
           'export DIR_EXPT=${{DIR_EXPT}}\n'
           'export DATA_TYPE=${{DATA_TYPE}}\n'
           'export ID=${{ID}}\n'
           'export SUB=${{SUB}}\n'
           """McRetroTS='{dir_pipe}bin/run_McRetroTS.sh {DIR_MATLAB}'\n"""
           'EOF\n\n'.format(
                ID=ID, 
                cmd=cmd,
                expt=expt, 
                mode=mode,
                proc=proc,
                user=user,
                datetime=datetime, 
                dir_pipe=dir_pipe, 
                DIR_DATA=DIR_DATA, 
                DIR_AFNI=DIR_AFNI,
                DIR_MATLAB=DIR_MATLAB))               
    f.write(txt)

    p_list = [] # keeps track of our command-list
    flag = 0 # breaks us out of the loop
    while flag == 0:    
        
        #
        #
        # -- THIS IS WHERE I WILL ADD THE PATHWAY OPTIONS:
        #       --> DTI, HCP, fMRI, etc...
        #       --> current 'PRE' pipeline becomes 'fMRI' 
        #
        #
        # add init_EPI, check for mistakes, break the loop if flawless
        line, output = epi.commands.init_epi.run()
        p_list, output = writer(p_list, line, '${CMD}', f, output, None, 'sub')
        if output != None:
            used = ['init_epi'] # start the 'used module' list
            flag = 1 # breaks us out of the loop
 
    # add user-defined modules
    flag = 0 # breaks us out of the loop
    while flag == 0:

        print('\nPlease select the next pipeline module:')
        module, used = get_modules(dir_pipe, moduletype='pre', used=used)

        if module == None:
            print('')
        else:
            # save the old output
            bkup = copy(output)

            # executes the chosen module, write pipeline commands
            command = 'epi.commands.' + str(module) + '.run(output)'
            line, output = eval(command)

            # if module call was unsuccessful, don't count as used.
            if output == None:
                used.pop()
            
            # write line in script if successful
            p_list, output = writer(p_list, line, '${CMD}', f, output, bkup, 'sub')

        # print the current pipeline configuration, ask to continue
        print('\nCurrent pre-processing pipeline:')
        for pipe in p_list:
            print('    ' + str(pipe))
        print('')
        response = raw_input("""Type 'stop' to stop, else continue: """)
        # breaks us out of the pipeline constructor loop
        if response == 'stop':
            flag = 1

    # add each subject to the proclist, close the subject loop
    txt = ('\nchmod 750 ${{DIR_DATA}}/${{DIR_EXPT}}/${{SUB}}/${{CMD}}\n'
           '# append this subject to the process queue\n'
           'echo bash ${{DIR_DATA}}/${{DIR_EXPT}}/${{SUB}}/${{CMD}} '
           '>> ${{DIR_DATA}}/${{DIR_EXPT}}/${{PROC}}\n'
           'done\n\n'
           '# calls to QC programs\n'.format(cmd=cmd, proc=proc))
    f.write(txt)

    # add user-defined qc runs    
    p_list = [] # keeps track of our command-list
    flag = 0 # breaks us out of the loop
    used = []
    while flag == 0:

        print('\nPlease select the next QC module:')
        module, used = get_modules(dir_pipe, moduletype='qc', used=used)
        if module == None:
            print('')
        else:
            # save the old output
            bkup = copy(output)
             
            # executes the chosen module, write pipeline commands
            command = ('epi.commands.' + str(module) + 
                         '.run(DIR_DATA, expt, mode)')
            line, output = eval(command)
            p_list, output = writer(p_list, line, '${PROC}', f, output, bkup, 'exp')

        # print the current pipeline configuration, ask to continue
        print('\nThe QC pipeline currently looks like this:')
        for pipe in p_list:
            print pipe
        print('')
        response = raw_input("""Type 'stop' to stop, else continue: """)
        # breaks us out of the pipeline constructor loop
        if response == 'stop':
            flag = 1

    print('\nSaving master script & generating subject-specific scripts.')
    # close the file, make executable by owner + group, and execute
    f.write('\n')
    f.close()
    os.chmod(os.path.join(DIR_DATA, expt, master), 0750)
    os.system('bash ' + os.path.join(DIR_DATA, expt, master))

    # print some final remarks
    print('******************************************************************')
    print('The pipeline can be manually executed via:\n' + 
           '. ' + str(os.path.join(DIR_DATA, expt, proc)) + '\n' +
           'or submitted to the queue via:\n' +
           'epi-queue ' + str(os.path.join(DIR_DATA, expt, proc))+' queuename.q')
    print('******************************************************************')

# this is the command-line usage bit
if __name__ == "__main__":
    
    # listing available modules and associated help
    if len(sys.argv) == 2 and sys.argv[1] == 'help':
        help_query()
    
    elif len(sys.argv) == 2 and sys.argv[1] == 'verify':
        print('Please specify an experiment.')
        get_experiments(check='check')

    # checking functions
    elif len(sys.argv) == 2 and sys.argv[1] == 'check':
        check_environment('verbose')

    elif len(sys.argv) == 2 and sys.argv[1] == 'clean':
        run_cleanup()

    # for running the command-line interface
    elif len(sys.argv) == 2 and sys.argv[1] == 'run':
        main()

    # return the usage if the user does a silly thing
    else:
        print(__doc__)
